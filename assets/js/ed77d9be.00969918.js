"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[28],{5349:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"Fields/CustomField","title":"Custom Field","description":"You can create custom field. You\'ll need to create a function that returns an object.","source":"@site/docs/Fields/CustomField.md","sourceDirName":"Fields","slug":"/Fields/CustomField","permalink":"/visual-editor/docs/Fields/CustomField","draft":false,"unlisted":false,"editUrl":"https://github.com/boxraiser/visual-editor/tree/main/docs/docs/Fields/CustomField.md","tags":[],"version":"current","sidebarPosition":1000,"frontMatter":{"sidebar_position":1000},"sidebar":"tutorialSidebar","previous":{"title":"DatePicker","permalink":"/visual-editor/docs/Fields/DatePicker"},"next":{"title":"Row","permalink":"/visual-editor/docs/Fields/Layout/Row"}}');var i=t(6106),s=t(8368);const r={sidebar_position:1e3},d="Custom Field",a={},l=[];function c(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"custom-field",children:"Custom Field"})}),"\n",(0,i.jsx)(n.p,{children:"You can create custom field. You'll need to create a function that returns an object."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"type SingleFieldDefinition<O, V> = {\n  // Name of the field\n  name: string, \n  // Options will be passed when rendering the component\n  options: O, \n  // Function to render the component in the editor\n  render: FunctionComponent<{value: V, onChange: (v: V) => void, options: O}>,\n  // Allow conditional rendering depending of the component data\n  shouldRender: (data: Record<string, unknown>) => boolean,\n  // You can compute extra props using the component data\n  extraProps?: (data: Record<string, unknown>) => Record<string, any>,\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"For instance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Field, React } from '@boxraiser/visual-editor'\n\nconst Component = ({\n  value,\n  onChange,\n  options,\n}) => {\n  return (\n    <Field label={options.label} help={options.help}>\n      <TiptapEditor\n        value={value}\n        onChange={onChange}\n        multiline={options.multiline}\n      />\n    </Field>\n  )\n}\n\nexport const MyCustomField = (name, options) => {\n  return {\n    name: name,\n    options: {\n      multiline: true,\n      allowHeadings: false,\n      default: '',\n      ...options,\n    },\n    render: Component,\n    shouldRender: () => true,\n  }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["For simple fields you can use the ",(0,i.jsx)(n.code,{children:"defineField"})," and ",(0,i.jsx)(n.code,{children:"defineFieldGroup"})," helper function."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"import { Field, defineField, React } from '@boxraiser/visual-editor'\n\nconst Component = ({ value, onChange, options }) => {\n  return <div>\n      <input value={value} onChange={(e) => onChange(e.target.value)} />\n  </div>\n}\n\nexport const Number = defineField({\n  defaultOptions: {\n    default: '',\n  },\n  render: Component,\n})\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can check how ",(0,i.jsx)(n.a,{href:"https://github.com/boxraiser/visual-editor/tree/main/visual-editor/src/fields",children:"it is used internally"})]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}}}]);