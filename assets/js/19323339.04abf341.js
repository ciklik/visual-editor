"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[528],{425:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Examples/Laravel","title":"Laravel","description":"Here is a sample code to render the content of the block inside Laravel. Every page component is rendered with a view named after the identifier with passing the data as variables with an additional fields variable containing all the fields.","source":"@site/docs/Examples/Laravel.md","sourceDirName":"Examples","slug":"/Examples/Laravel","permalink":"/visual-editor/docs/Examples/Laravel","draft":false,"unlisted":false,"editUrl":"https://github.com/boxraiser/visual-editor/tree/main/docs/docs/Examples/Laravel.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Tabs","permalink":"/visual-editor/docs/Fields/Layout/Tabs"},"next":{"title":"Create templates","permalink":"/visual-editor/docs/templates"}}');var r=t(6106),s=t(8368);const i={},l="Laravel",o={},c=[];function d(e){const a={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"laravel",children:"Laravel"})}),"\n",(0,r.jsxs)(a.p,{children:["Here is a sample code to render the content of the block inside Laravel. Every page component is rendered with a view named after the identifier with passing the data as variables with an additional ",(0,r.jsx)(a.code,{children:"fields"})," variable containing all the fields."]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-php",children:"class BlockRenderer\n{\n\n    /* \n    *  Interceptors acts as middlewares\n    *  and can transform the data with\n    *  the inject(string $blocName, array $data) method\n    */ \n    private static $interceptors = [\n        'my-block' => MyBlockInterceptor::class,\n    ];\n\n    public static function render($blocs): string\n    {\n        if (is_string($blocs)) {\n            $blocs = json_decode($blocs, true);\n        }\n        return collect($blocs)->map(function ($bloc) {\n            return self::renderBlock($bloc);\n        })->join('');\n    }\n\n    private static function renderBlock(array $data): string\n    {\n        $request = request();\n        $blocName = $data['_name'];\n        $data['isPreview'] = false;\n        if (isset(self::$interceptors[$blocName])) {\n            $data = app(self::$interceptors[$blocName])->inject($blocName, $data);\n        }\n        if ($request->route()->getName() === 'preview') {\n            $data['isPreview'] = true;\n        }\n        return view(\"front.blocs.{$blocName}\", array_merge(['fields' => $data], $data))->render();\n    }\n    \n}\n"})})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);